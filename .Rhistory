(a[1][1,1])[0]
(a[1][1,1])[1]
a[1][1][1]
a[1][1][1][1]
pairs
list(pairs)
pair
pair[1]
pair[1][1]
pair[1][1]
pair[1][2]
a =c(0,1,2)
pair <- combn(a,2)
pair
for (i in seq(lenght))
()
a=c(1,2,3)
a[1]
a[2]
?seq
seq(10)
seq(1,10)
seq(2,10)
seq(2,2)
a =c(0,1,2)
b=length(a)
for (i in seq(1,b){
for (j in seq(i+1,b)){
print(c(i,j))
}
}
for (i in seq(1,b){print(i)}
for (i in seq(1,b){print(i)}
b
for (i in seq(1,b){print(i)}
a =c(0,1,2)
b=length(a)
for (i in seq(1,b)){
for (j in seq(i+1,b)){
print(c(i,j))
}
}
c(1,2)
as.characterc(1,2)
as.character(1,2)
as.character(c(1,2)
)
a
append(a,3)
a=c(2,2,3,4,5,5)
pair <- unique(a)
pairl <- length(pair)
pairs <- ()
pairs <- c()
for (i in seq(1,pairl)){
for (j in seq(i+1,pairl)){
append(pairs,c(pair[i],pair[j])
}
}
for (i in seq(1,pairl)){
for (j in seq(i+1,pairl)){
append(pairs,c(pair[i],pair[j]))
}
}
pairs
pairs <- list()
for (i in seq(1,pairl)){
for (j in seq(i+1,pairl)){
append(pairs,c(pair[i],pair[j]))
}
}
pairs
?append
a
d=list()
append(d,1)
append(d,1)
pairs <- c()
for (i in seq(1,pairl)){
for (j in seq(i+1,pairl)){
pairs = append(pairs,c(pair[i],pair[j]))
}
}
pairs
a=c(2,2,3,4,5,5)
pair <- unique(a)
pairl <- length(pair)
pair
a=c(2,2,3,4,5,5)
pair <- combn(unique(a),2)
pair <- apply(pair,2,as.character)
pair
pair <- split(pair,col(pair))
pair
pairs <- c()
for (n in seq(length(pair))){pairs[n]= c()}
pairs
a=c(2,2,3,4,5,5)
pair <- combn(unique(a),2)
pair <- apply(pair,2,as.character)
pair <- split(pair,col(pair))
pairs <- c()
for (n in seq(length(pair))){pairs[n]= pair[n]}
pairs
pair
pair[1]
pair[1][1]
c(pair[1][1])
list(pair[1][1])
as.vector(pair[1][1])
?stat_compare_means
library("ggplot2")
?stat_compare_means
suppressPackageStartupMessages(library(ggpubr));
suppressPackageStartupMessages(library(tidyverse));
suppressPackageStartupMessages(library(magrittr));
suppressPackageStartupMessages(library(getopt));
suppressPackageStartupMessages(library(dplyr));
suppressPackageStartupMessages(library(ggsci));
?stat_compare_means
a=c(2,2,3,4,5,5)
pair <- combn(unique(a),2)
pair <- apply(pair,2,as.character)
pair <- split(pair,col(pair))
pairs <- c()
for (n in seq(length(pair))){pairs[n]= pair[n]}
pairs
pairs[1]
mode(pairs[1])
mode(pairs[1][1])
pairs[1][1]
pairs[1]
as.vector(pairs[1])
leangth(pairs[1][1])
leagth(pairs[1][1])
length(pairs[1][1])
length(as.vector(pairs[1][1]))
a=c(2,2,3,4,5,5)
pair <- combn(unique(a),2)
pair <- apply(pair,2,as.character)
pair <- split(pair,col(pair))
pair
length(as.vector(pairs[1][1]))
length(as.vector(pair[1][1]))
as.vector(pair[1])
as.vector(pair)
as.vector(pair)[3]
as.vector(pair)[3][2]
mode(pair)
mode(pair)
?split
?stat_compare_means
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
my_comparisons
pair
?expand.grid
lvl=(1,2,3)
compare = expand.grid( a = lvl
, b = lvl
, stringsAsFactors = F)
lvl=c(1,2,3)
compare = expand.grid( a = lvl
, b = lvl
, stringsAsFactors = F)
compare
compare = expand.grid( a = lvl
, b = lvl
, stringsAsFactors = F) %>%
filter( a != b) %>%
mutate( comb = map2( a, b, function(x,y) sort( c(x,y) ) )
, comb = map( comb, paste0, collapse = ',' )
) %>%
unnest( comb ) %>%
group_by( comb ) %>%
summarise() %>%
mutate( comb = stringr::str_split(comb, ',') ) %>%
.$comb
compare
combn(lvl, 2, simplify = FALSE)
?expand.grid
?stat_compare_means
lvl=c(0, 1,2)
combn(lvl, 2, simplify = FALSE)
lvl
as.character(lvl)
combn(lvl, 2, simplify = FALSE)
+100
You can try following. The idea is that you calculate the stats by your own using pairwise.wilcox.test. Then you use the ggsignif function geom_signif to add the precalculated pvalues. With y_position you can place the brackets so they don't overlap.
library(tidyverse)
library(ggsignif)
library(broom)
# your list of combinations you want to compare
CN <- combn(levels(mydf$Group)[-9], 2, simplify = FALSE)
# the pvalues. I use broom and tidy to get a nice formatted dataframe. Note, I turned off the adjustment of the pvalues.
pv <- tidy(with(mydf[ mydf$Group != "PGMC4", ], pairwise.wilcox.test(Value, Group, p.adjust.method = "none")))
#  data preparation
CN2 <- do.call(rbind.data.frame, CN)
colnames(CN2) <- colnames(pv)[-3]
# subset the pvalues, by merging the CN list
pv_final <- merge(CN2, pv, by.x = c("group2", "group1"), by.y = c("group1", "group2"))
# fix ordering
pv_final <- pv_final[order(pv_final$group1), ]
# set signif level
pv_final$map_signif <- ifelse(pv_final$p.value > 0.05, "", ifelse(pv_final$p.value > 0.01,"*", "**"))
# the plot
ggplot(mydf, aes(x=Group, y=Value, fill=Group)) + geom_boxplot() +
stat_compare_means(data=mydf[ mydf$Group != "PGMC4", ], aes(x=Group, y=Value, fill=Group), size=5) +
ylim(-4,30)+
geom_signif(comparisons=CN,
y_position = 3:30, annotation= pv_final$map_signif) +
theme_bw(base_size = 16)
?facet_wrap
?expand_limits
blank_data <- data.frame(group = c("A", "A", "B", "B", "C", "C"), x = 0, y = c(0,
8, 0, 40, 0, 50))
## Plot it in ggplot
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
geom_blank(data = blank_data, aes(x = x, y = y)) + facet_wrap(~group, scales = "free_y") +
expand_limits(y = 0) + scale_y_continuous(expand = c(0, 0)) + theme_bw()
foo.dat<-rbind(data.frame(group="A", x = runif(50), y=rnorm(50,mean=5)),
data.frame(group="B", x = runif(50), y=rnorm(50,mean=5,sd=3)+20),
data.frame(group="C", x = runif(50), y=rnorm(50,mean=5,sd=5)+30))
ggplot() +
geom_point(data=foo.dat,aes(x=x,y=y,colour=group),size=4) +
facet_wrap(~group,scales="free_y") + ## using scales="free_y" allows the y-axis to vary while keeping x-axis constant among plots
theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = 0) + scale_y_continuous(expand = c(0,
0)) + theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = 0) + scale_y_continuous(expand = c(10,
10)) + theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = 0) + scale_y_continuous(expand = c(0,
1)) + theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = 0) + scale_y_continuous(expand = c(1,
0)) + theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = 0) + scale_y_continuous(expand = c(0,
0)) + theme_bw()
?expand_limits
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = c(10,40,70)) + scale_y_continuous(expand = c(0,
0)) + theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = c(10,40,70))  + theme_bw()
?expand_limits
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y") + expand_limits(y = c(10,40,70))  + theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group+c(10,10,10), scales = "free_y")  + theme_bw()
?coord_cartesian
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y")  + theme_bw()
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y")  + theme_bw() +coord_cartesian(ylim=c(3,5,8))
?geom_segment
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y")  + theme_bw() +geom_segment(yend=c(10,20,30))
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y")  + theme_bw() +geom_segment(aes(x=x,y=y,yend=c(10,20,30)))
ggplot() + geom_point(data = foo.dat, aes(x = x, y = y, colour = group), size = 4) +
facet_wrap(~group, scales = "free_y")  + geom_segment(aes(x=x,y=y,yend=c(10,20,30))) + theme_bw()
?geom_segment
?ylimt
?stat_compare_means
suppressPackageStartupMessages(library(ggpubr));
suppressPackageStartupMessages(library(tidyverse));
suppressPackageStartupMessages(library(magrittr));
suppressPackageStartupMessages(library(getopt));
suppressPackageStartupMessages(library(dplyr));
suppressPackageStartupMessages(library(ggsci));
suppressPackageStartupMessages(library(ggsignif));
?stat_compare_means
foo
foo.dat
a = foo.dat
a
a$group
tapply(a$group,a$x,mean)
a
head(a)
a.shape()
a <- data.frame (
name = c("s1", "s2", "s3", "s2", "s1", "s3"),
age = c(12, 13, 10, 13, 12, 10),
classid = c("c1", "c2", "c3", "c2", "c1", "c3"),
score = c(78, 68, 99, 81, 82, 90),
subject = c("su1", "su1", "su1", "su2", "su2", "su2")
)
a
a <- data.frame (
b = c("s1", "s2", "s3", "s2", "s1", "s3"),
c = c(12, 13, 10, 13, 12, 10),
d = c("c1", "c2", "c3", "c2", "c1", "c3"),
e = c(78, 68, 99, 81, 82, 90),
f = c("su1", "su1", "su1", "su2", "su2", "su2")
)
a
tapply(a$b,a$c,mean)
tapply(a$c,a$b,mean)
c= tapply(a$c,a$b,max)
c
c+10
?facet_wrap
suppressPackageStartupMessages(library(ggpubr));
suppressPackageStartupMessages(library(tidyverse));
suppressPackageStartupMessages(library(magrittr));
suppressPackageStartupMessages(library(getopt));
suppressPackageStartupMessages(library(dplyr));
suppressPackageStartupMessages(library(ggsci));
suppressPackageStartupMessages(library(ggsignif));
?stat_compare_means
# Load data
data("ToothGrowth")
head(ToothGrowth)
# Two independent groups
#:::::::::::::::::::::::::::::::::::::::::::::::::
p <- ggboxplot(ToothGrowth, x = "supp", y = "len",
color = "supp", palette = "npg", add = "jitter")
#  Add p-value
p + stat_compare_means()
# Change method
p + stat_compare_means(method = "t.test")
# Paired samples
#:::::::::::::::::::::::::::::::::::::::::::::::::
ggpaired(ToothGrowth, x = "supp", y = "len",
color = "supp", line.color = "gray", line.size = 0.4,
palette = "npg")+
stat_compare_means(paired = TRUE)
# More than two groups
#:::::::::::::::::::::::::::::::::::::::::::::::::
# Pairwise comparisons: Specify the comparisons you want
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "npg")+
# Add pairwise comparisons p-value
stat_compare_means(comparisons = my_comparisons, label.y = c(29, 35, 40))+
stat_compare_means(label.y = 45)     # Add global Anova p-value
# Multiple pairwise test against a reference group
ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "npg")+
stat_compare_means(method = "anova", label.y = 40)+ # Add global p-value
stat_compare_means(aes(label = ..p.signif..),
method = "t.test", ref.group = "0.5")
# Multiple grouping variables
#:::::::::::::::::::::::::::::::::::::::::::::::::
# Box plot facetted by "dose"
p <- ggboxplot(ToothGrowth, x = "supp", y = "len",
color = "supp", palette = "npg",
add = "jitter",
facet.by = "dose", short.panel.labs = FALSE)
# Use only p.format as label. Remove method name.
p + stat_compare_means(
aes(label = paste0("p = ", ..p.format..))
)
?compare_means
?geom_signif
?facet_wrap
?facet_wrap
?stat_compare_means
suppressPackageStartupMessages(library(pheatmap));
suppressPackageStartupMessages(library(ggplot2));
suppressPackageStartupMessages(library(dendextend));
suppressPackageStartupMessages(library(getopt));
suppressPackageStartupMessages(library(RColorBrewer));
col<- colorRampPalette(c("blue", "white", "red"))(20)
col
p <- ggboxplot(ToothGrowth, x = "supp", y = "len",
））））)
library(Hmisc)
a=read.csv()
getwd()
sedwd("C:/Users/lenovo/Desktop/workdirectory/cellular factors")
sed\twd("C:/Users/lenovo/Desktop/workdirectory/cellular factors")
setwd("C:/Users/lenovo/Desktop/workdirectory/cellular factors")
a=renad.cvs("treatment3.txt",sep="\t",header=TRUE)
a=read.cvs("treatment3.txt",sep="\t",header=TRUE)
readxl::anchored()
a=read.csv("treatment3.txt",sep="\t",header=TRUE)
a
a
a[3:10]
as.matrix(a[3:10])
rcorr(as.matrix(a[3:10]))
?pheatmap
seq(10)
a=c(1,1,2,2,3,3)
unique(a)
unique(a)[1]
unique(a)[2]
quantile(a)
mode(quantile(a))
b=(quantile(a)
)
b
as.data.frame(b)
b
mean(b)
rbind(a,b)
cbind(a,b)
a
b
mean(b)
data.frame(a)
t(data.frame(a))
vc=a
vi = c(length(vc),mean(vc),sd(vc))
vii= quantile(vc))
vi = c(length(vc),mean(vc),sd(vc))
vii= quantile(vc)
vi
vii
cbind(vii,vi)
rbind(vii,vi)
vi
colnames(vi) = c(length,mean,sd)
colnames(vi) = c('length','mean','sd')
vi
?as.data.frame()
as.data.frame(vi,row.names= c('length','mean','sd'))
as.data.frame(vi,colnames= c('length','mean','sd'))
t(as.data.frame(vi,colnames= c('length','mean','sd')))
t(as.data.frame(vi,row.names= c('length','mean','sd')))
viii = t(as.data.frame(vi,row.names= c('length','mean','sd')))
vii
cbind(viii,vii)
rbind(viii,vii)
vii
as.data.frame(vii)
viii = t(as.data.frame(vi,row.names= c('length','mean','sd'))
)
vc
vi = c(length(vc),mean(vc),sd(vc))
vi = as.data.frame(vi, row.names= c('length','mean','sd'))
vii= as.data.frame(quantile(vc)))
vi
vii
vi = c(length(vc),mean(vc),sd(vc))
vi = as.data.frame(vi, row.names= c('length','mean','sd'))
vii= as.data.frame(quantile(vc))
cblind(vii,viii)
rblind(vii,viii)
rblind(vii,vi)
cblind(vii,vi)
cbind(vii,vi)
rbind(vii,vi)
vi
vii
typei='cccccccccc'
vi = c(length(vc),mean(vc),sd(vc))
vi = as.data.frame(vi, row.names= c('length','mean','sd'),colnames=typri)
vii= as.data.frame(quantile(vc),colnames=typri )
vii
vignette()
vi = c(length(vc),mean(vc),sd(vc))
vi = as.data.frame(vi, row.names= c('length','mean','sd'),col.names=typri)
vii= as.data.frame(quantile(vc),col.names=typri )
vii
vignette()
vi
typei='cccccccccc'
typri='cccccccccc'
vi = c(length(vc),mean(vc),sd(vc))
vi = as.data.frame(vi, row.names= c('length','mean','sd'),col.names=typri)
vii= as.data.frame(quantile(vc),col.names=typri )
vii
typri='cccccccccc'
vi = c(length(vc),mean(vc),sd(vc))
vi = as.data.frame(vi, row.names= c('length','mean','sd'),col.names=typri)
vii= as.data.frame(quantile(vc),col.names=typri )
vi
vii
aa = c(length(vc),mean(vc),sd(vc),quantile(vc))
aa
as.data.frame(aa)
p[1] =as.data.frame(aa)
p =()
p =c()
p[1] =as.data.frame(aa)
p[2] =as.data.frame(aa)
p
as.data.frame(p)
p
list(p)
p
as.matrix(p)
merge?
?
/
?merge
merge(p)
p
merge(p[0],p[1])
merge(p[1],p[2])
merge(p[1],p[2],1)
merge(p[1],p[2],2)
p
?write.table
as.data.frame.list(p)
as.data.frame(p)
t(as.data.frame(p))
t(as.data.frame(p))
t(p)
p
as.data.frame(p)
as.data.frame(p)
as.data.frame(p,col.names = c('a','b'))
?write.table
?scale_color_lancet
??scale_color_lancet
